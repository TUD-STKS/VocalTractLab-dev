name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Checkout submodules # checkout backend repo as a submodule
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

    - name: Cache VCPKG packages
      uses: actions/cache@v2
      env: 
        cache-name: cache-vcpkg-packages
      with:
        path: vcpkg
        key: ${{ runner.OS }}-vcpkg-cache-${{ hashFiles('**/installed/vcpkg/status') }}
        restore-keys: |
          ${{ runner.OS }}-vcpkg-cache-    
    
    - name: Get GTK3 libs
      run: sudo apt-get install libgtk-3-dev
    
    - name: Get OpenAL
      run: sudo apt-get install libopenal-dev
      
    - name: Get OpenGL
      run: sudo apt-get install mesa-utils
      
    - name: Get GLUT
      run: sudo apt-get install freeglut3-dev
    
    - name: Get vcpkg
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
       git clone https://github.com/microsoft/vcpkg
       ./vcpkg/bootstrap-vcpkg.sh

    - name: Install wxWidgets
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: ./vcpkg/vcpkg install wxwidgets --triplet=x64-linux

    - name: Configure CMake
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target VocalTractLab
      
