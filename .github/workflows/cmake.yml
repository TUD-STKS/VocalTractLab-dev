name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Checkout submodules # checkout backend repo as a submodule
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

    # Cache the previously built libraries
    - name: Cache wxWidgets
      id: cache-wx
      uses: actions/cache@v2
      with:
        path: ${{env.GITHUB_WORKSPACE}}/wxWidgets-3.1.5
        key: ${{ runner.os }}-libs
    
    - name: Get GTK3 libs
      run: sudo apt-get install libgtk-3-dev
    
    - name: Get OpenAL
      run: sudo apt-get install libopenal-dev
      
    - name: Get OpenGL
      run: sudo apt-get install mesa-utils
      
    - name: Get GLUT depedencies
      run: sudo apt-get install libxi-dev libgl1-mesa-dev libglu1-mesa-dev mesa-common-dev libxrandr-dev libxxf86vm-dev
      
    - name: Get GLUT
      run: ./vcpkg/vcpkg install freeglut
    
    - name: Build wxWidgets
      if: steps.cache-wx.outputs.cache-hit != 'true'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        wget https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.5/wxWidgets-3.1.5.tar.bz2
        tar -xf wxWidgets-3.1.5.tar.bz2
        cd wxWidgets-3.1.5
        mkdir buildgtk
        cd buildgtk
        ../configure --with-gtk --with-opengl
        make
     - name: Install wxWidgets
       working-directory: ${{env.GITHUB_WORKSPACE}}/wxWidgets-3.1.5/buildgtk
       run: |
         sudo make install
         sudo ldconfig

    - name: Configure CMake
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target VocalTractLab
      
