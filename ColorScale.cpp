// ****************************************************************************
// This file is part of VocalTractLab3D.
// Copyright (C) 2022, Peter Birkholz, Dresden, Germany
// www.vocaltractlab.de
// author: Peter Birkholz and Rémi Blandin
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.
//
// ****************************************************************************

#include "ColorScale.h"
#include <stdio.h>
#include <math.h>

// ****************************************************************************
/// RGB, each 0.0 to 1.0, to HSV.
/// H = 0.0 to 360.0 (corresponding to 0..360.0 degrees around hexcone)
/// S = 0.0 (shade of gray) to 1.0 (pure color)
/// V = 0.0 (black) to 1.0 {white)
// ****************************************************************************

void ColorScale::rgbToHsv(const double r, const double g, const double b, double &h, double &s, double &v)
{
  double max = maximum(r, g, b);
  double min = minimum(r, g, b);

  v = max;      // This is the value (brightness)

  // Next, calculate saturation
  s = (max != 0.0) ? ((max-min)/max) : 0.0;
  
  // Finally, determine hue

  if (s == 0.0)
  {
    h = 0.0;    // actually undefined
  }
  else
  {
    double delta = max - min;
    if (r == max)
    {
      h = (g - b) / delta;    // between yellow and magenta [degrees]
    }
    else
    if (g == max)
    {
      h = 2.0 + (b - r) / delta;    // between cyan and yellow
    }
    else
    if (b == max)
    {
      h = 4.0 + (r - g) / delta;    // between magenta and cyan
    }

    h*= 60.0;   // Convert to degrees
    if (h < 0.0)
    {
      h+= 360.0;
    }
  }
}


// ****************************************************************************
/// H = 0.0 to 360.0 (corresponding to 0..360 degrees around hexcone)
/// NaN (undefined) for S = 0
/// S = 0.0 (shade of gray) to 1.0 (pure color)
/// V = 0.0 (black) to 1.0 (white)
/// The RGB values are in [0,1].
// ****************************************************************************

void ColorScale::hsvToRgb(const double h, const double s, const double v, double &r, double &g, double &b)
{
  // The color is on the black-white centerline
  if (s == 0.0)
  {
    r = v;
    g = v;
    b = v;
  }
  else
  {
    double f, p, q, t;
    int i;

    double newH = h;
    if (newH == 360.0)
    {
      newH = 0.0;
    }
    newH/= 60.0;   // h is now in [0,6)
    i = (int)floor(newH);
    f = newH - i;
    p = v*(1.0 - s);
    q = v*(1.0 - s*f);
    t = v*(1.0 - (s*(1.0 - f)));

    switch (i)
    {
    case 0: r = v; g = t; b = p; break;
    case 1: r = q; g = v; b = p; break;
    case 2: r = p; g = v; b = t; break;
    case 3: r = p; g = q; b = v; break;
    case 4: r = t; g = p; b = v; break;
    case 5: r = v; g = p; b = q; break;
    }
  }
}

// ****************************************************************************
/// Fills the given array with the colors of a quantitative, perceptually-
/// based color scale between blue and yellow.
// ****************************************************************************

void ColorScale::getYellowBlueScale(int numColors, wxColor scale[])
{
  int half = numColors / 2;
  int i;
  double h, s, v;   // Hue, saturation, value (brightness)
  double r, g, b;

  v = 0.9;    // Keep brightness constant

  h = 240.0;  // 240 degrees = blue
  for (i=0; i < half; i++)
  {
    s = 1.0 - (double)i / (double)(half-1);
    hsvToRgb(h, s, v, r, g, b);
    scale[i] = wxColor((int)(r*255.0), (int)(g*255.0), (int)(b*255.0));
  }

  h = 60.0;  // 60 degrees = yellow
  for (i=half; i < numColors; i++)
  {
    s = (double)(i-half) / (double)(numColors-half-1);
    hsvToRgb(h, s, v, r, g, b);
    scale[i] = wxColor((int)(r*255.0), (int)(g*255.0), (int)(b*255.0));
  }
}

// ****************************************************************************
// Returns a pointer to an array containing the values of a color map
// ****************************************************************************
typedef int(*ColorMap)[256][3];
ColorMap ColorScale::getColorMap(enum ColorMapType mapType) {

  switch (mapType)
  {
  case DIVERGING_COLORBLIND:
    // CET-CBD1:   diverging-protanopic-deuteranopic_bwy_60-95_c32_n256
    // from https://peterkovesi.com/projects/colourmaps/
    // 
    // Peter Kovesi. Good Colour Maps: How to Design Them.
  {
    static int colorMap[256][3] = {
            {58,144,254},
            {62,145,254},
            {65,146,254},
            {68,146,254},
            {70,147,254},
            {73,148,254},
            {76,148,254},
            {78,149,254},
            {80,150,254},
            {83,151,253},
            {85,151,253},
            {87,152,253},
            {89,153,253},
            {91,153,253},
            {94,154,253},
            {96,155,253},
            {97,155,253},
            {99,156,253},
            {101,157,253},
            {103,158,253},
            {105,158,253},
            {107,159,253},
            {109,160,252},
            {110,160,252},
            {112,161,252},
            {114,162,252},
            {115,163,252},
            {117,163,252},
            {119,164,252},
            {120,165,252},
            {122,165,252},
            {124,166,252},
            {125,167,252},
            {127,168,251},
            {128,168,251},
            {130,169,251},
            {131,170,251},
            {133,171,251},
            {134,171,251},
            {136,172,251},
            {137,173,251},
            {139,173,251},
            {140,174,251},
            {141,175,251},
            {143,176,250},
            {144,176,250},
            {146,177,250},
            {147,178,250},
            {148,179,250},
            {150,179,250},
            {151,180,250},
            {152,181,250},
            {154,182,250},
            {155,182,250},
            {156,183,250},
            {158,184,249},
            {159,185,249},
            {160,185,249},
            {161,186,249},
            {163,187,249},
            {164,187,249},
            {165,188,249},
            {166,189,249},
            {168,190,249},
            {169,190,249},
            {170,191,248},
            {171,192,248},
            {173,193,248},
            {174,194,248},
            {175,194,248},
            {176,195,248},
            {177,196,248},
            {179,197,248},
            {180,197,248},
            {181,198,247},
            {182,199,247},
            {183,200,247},
            {185,200,247},
            {186,201,247},
            {187,202,247},
            {188,203,247},
            {189,203,247},
            {190,204,247},
            {192,205,246},
            {193,206,246},
            {194,206,246},
            {195,207,246},
            {196,208,246},
            {197,209,246},
            {198,210,246},
            {199,210,246},
            {201,211,246},
            {202,212,245},
            {203,213,245},
            {204,213,245},
            {205,214,245},
            {206,215,245},
            {207,216,245},
            {208,217,245},
            {209,217,245},
            {211,218,244},
            {212,219,244},
            {213,220,244},
            {214,220,244},
            {215,221,244},
            {216,222,244},
            {217,223,244},
            {218,224,244},
            {219,224,243},
            {220,225,243},
            {221,226,243},
            {222,227,243},
            {223,228,243},
            {224,228,243},
            {226,229,243},
            {227,230,242},
            {228,231,242},
            {229,231,242},
            {230,232,242},
            {231,233,242},
            {232,234,241},
            {233,234,241},
            {234,235,241},
            {234,236,240},
            {235,236,240},
            {236,236,239},
            {236,237,238},
            {237,237,237},
            {237,237,236},
            {238,237,235},
            {238,236,234},
            {238,236,232},
            {238,236,231},
            {238,235,229},
            {237,234,228},
            {237,234,226},
            {237,233,224},
            {236,232,223},
            {236,231,221},
            {236,231,219},
            {235,230,218},
            {235,229,216},
            {234,228,214},
            {234,228,213},
            {233,227,211},
            {233,226,209},
            {233,225,208},
            {232,224,206},
            {232,224,204},
            {231,223,202},
            {231,222,201},
            {230,221,199},
            {230,220,197},
            {229,220,196},
            {229,219,194},
            {228,218,192},
            {228,217,191},
            {227,216,189},
            {227,216,187},
            {226,215,186},
            {226,214,184},
            {226,213,182},
            {225,213,181},
            {225,212,179},
            {224,211,177},
            {224,210,176},
            {223,209,174},
            {223,209,172},
            {222,208,171},
            {222,207,169},
            {221,206,167},
            {220,206,166},
            {220,205,164},
            {219,204,162},
            {219,203,161},
            {218,203,159},
            {218,202,157},
            {217,201,156},
            {217,200,154},
            {216,199,152},
            {216,199,151},
            {215,198,149},
            {215,197,148},
            {214,196,146},
            {214,196,144},
            {213,195,143},
            {212,194,141},
            {212,193,139},
            {211,193,138},
            {211,192,136},
            {210,191,134},
            {210,190,133},
            {209,190,131},
            {208,189,129},
            {208,188,128},
            {207,187,126},
            {207,187,125},
            {206,186,123},
            {206,185,121},
            {205,184,120},
            {204,184,118},
            {204,183,116},
            {203,182,115},
            {203,181,113},
            {202,181,111},
            {201,180,110},
            {201,179,108},
            {200,178,106},
            {199,178,105},
            {199,177,103},
            {198,176,102},
            {198,175,100},
            {197,175,98},
            {196,174,97},
            {196,173,95},
            {195,172,93},
            {194,172,92},
            {194,171,90},
            {193,170,88},
            {193,169,87},
            {192,169,85},
            {191,168,83},
            {191,167,81},
            {190,166,80},
            {189,166,78},
            {189,165,76},
            {188,164,75},
            {187,164,73},
            {187,163,71},
            {186,162,69},
            {185,161,68},
            {185,161,66},
            {184,160,64},
            {183,159,62},
            {183,159,60},
            {182,158,59},
            {181,157,57},
            {180,156,55},
            {180,156,53},
            {179,155,51},
            {178,154,49},
            {178,153,47},
            {177,153,45},
            {176,152,43},
            {176,151,41},
            {175,151,39},
            {174,150,36},
            {173,149,34},
            {173,149,32},
            {172,148,29},
            {171,147,26},
            {171,146,23},
            {170,146,20},
            {169,145,17},
            {168,144,13},
            {168,144,8},
    };
    return &colorMap;
    break;
  }

    // Viridis from Matplotlib
    case VIRIDIS:
    {
      static int colorMap[256][3] = {
        {68,1,84},
        {68,2,86},
        {69,4,87},
        {69,5,89},
        {70,7,90},
        {70,8,92},
        {70,10,93},
        {70,11,94},
        {71,13,96},
        {71,14,97},
        {71,16,99},
        {71,17,100},
        {71,19,101},
        {72,20,103},
        {72,22,104},
        {72,23,105},
        {72,24,106},
        {72,26,108},
        {72,27,109},
        {72,28,110},
        {72,29,111},
        {72,31,112},
        {72,32,113},
        {72,33,115},
        {72,35,116},
        {72,36,117},
        {72,37,118},
        {72,38,119},
        {72,40,120},
        {72,41,121},
        {71,42,122},
        {71,44,122},
        {71,45,123},
        {71,46,124},
        {71,47,125},
        {70,48,126},
        {70,50,126},
        {70,51,127},
        {70,52,128},
        {69,53,129},
        {69,55,129},
        {69,56,130},
        {68,57,131},
        {68,58,131},
        {68,59,132},
        {67,61,132},
        {67,62,133},
        {66,63,133},
        {66,64,134},
        {66,65,134},
        {65,66,135},
        {65,68,135},
        {64,69,136},
        {64,70,136},
        {63,71,136},
        {63,72,137},
        {62,73,137},
        {62,74,137},
        {62,76,138},
        {61,77,138},
        {61,78,138},
        {60,79,138},
        {60,80,139},
        {59,81,139},
        {59,82,139},
        {58,83,139},
        {58,84,140},
        {57,85,140},
        {57,86,140},
        {56,88,140},
        {56,89,140},
        {55,90,140},
        {55,91,141},
        {54,92,141},
        {54,93,141},
        {53,94,141},
        {53,95,141},
        {52,96,141},
        {52,97,141},
        {51,98,141},
        {51,99,141},
        {50,100,142},
        {50,101,142},
        {49,102,142},
        {49,103,142},
        {49,104,142},
        {48,105,142},
        {48,106,142},
        {47,107,142},
        {47,108,142},
        {46,109,142},
        {46,110,142},
        {46,111,142},
        {45,112,142},
        {45,113,142},
        {44,113,142},
        {44,114,142},
        {44,115,142},
        {43,116,142},
        {43,117,142},
        {42,118,142},
        {42,119,142},
        {42,120,142},
        {41,121,142},
        {41,122,142},
        {41,123,142},
        {40,124,142},
        {40,125,142},
        {39,126,142},
        {39,127,142},
        {39,128,142},
        {38,129,142},
        {38,130,142},
        {38,130,142},
        {37,131,142},
        {37,132,142},
        {37,133,142},
        {36,134,142},
        {36,135,142},
        {35,136,142},
        {35,137,142},
        {35,138,141},
        {34,139,141},
        {34,140,141},
        {34,141,141},
        {33,142,141},
        {33,143,141},
        {33,144,141},
        {33,145,140},
        {32,146,140},
        {32,146,140},
        {32,147,140},
        {31,148,140},
        {31,149,139},
        {31,150,139},
        {31,151,139},
        {31,152,139},
        {31,153,138},
        {31,154,138},
        {30,155,138},
        {30,156,137},
        {30,157,137},
        {31,158,137},
        {31,159,136},
        {31,160,136},
        {31,161,136},
        {31,161,135},
        {31,162,135},
        {32,163,134},
        {32,164,134},
        {33,165,133},
        {33,166,133},
        {34,167,133},
        {34,168,132},
        {35,169,131},
        {36,170,131},
        {37,171,130},
        {37,172,130},
        {38,173,129},
        {39,173,129},
        {40,174,128},
        {41,175,127},
        {42,176,127},
        {44,177,126},
        {45,178,125},
        {46,179,124},
        {47,180,124},
        {49,181,123},
        {50,182,122},
        {52,182,121},
        {53,183,121},
        {55,184,120},
        {56,185,119},
        {58,186,118},
        {59,187,117},
        {61,188,116},
        {63,188,115},
        {64,189,114},
        {66,190,113},
        {68,191,112},
        {70,192,111},
        {72,193,110},
        {74,193,109},
        {76,194,108},
        {78,195,107},
        {80,196,106},
        {82,197,105},
        {84,197,104},
        {86,198,103},
        {88,199,101},
        {90,200,100},
        {92,200,99},
        {94,201,98},
        {96,202,96},
        {99,203,95},
        {101,203,94},
        {103,204,92},
        {105,205,91},
        {108,205,90},
        {110,206,88},
        {112,207,87},
        {115,208,86},
        {117,208,84},
        {119,209,83},
        {122,209,81},
        {124,210,80},
        {127,211,78},
        {129,211,77},
        {132,212,75},
        {134,213,73},
        {137,213,72},
        {139,214,70},
        {142,214,69},
        {144,215,67},
        {147,215,65},
        {149,216,64},
        {152,216,62},
        {155,217,60},
        {157,217,59},
        {160,218,57},
        {162,218,55},
        {165,219,54},
        {168,219,52},
        {170,220,50},
        {173,220,48},
        {176,221,47},
        {178,221,45},
        {181,222,43},
        {184,222,41},
        {186,222,40},
        {189,223,38},
        {192,223,37},
        {194,223,35},
        {197,224,33},
        {200,224,32},
        {202,225,31},
        {205,225,29},
        {208,225,28},
        {210,226,27},
        {213,226,26},
        {216,226,25},
        {218,227,25},
        {221,227,24},
        {223,227,24},
        {226,228,24},
        {229,228,25},
        {231,228,25},
        {234,229,26},
        {236,229,27},
        {239,229,28},
        {241,229,29},
        {244,230,30},
        {246,230,32},
        {248,230,33},
        {251,231,35},
        {253,231,37},
      };
      return &colorMap;
      break;
    }
    case TWILIGHT:
    // twilight from Matplotlib
    // https://github.com/bastibe/twilight
    {
      static int colorMap[256][3] = {
        {244, 235, 244},
        { 241,233,242 },
        { 238,231,239 },
        { 234,229,237 },
        { 231,227,235 },
        { 229,226,232 },
        { 226,224,230 },
        { 223,222,228 },
        { 220,220,226 },
        { 217,218,224 },
        { 214,217,222 },
        { 211,215,220 },
        { 208,213,219 },
        { 205,212,217 },
        { 201,210,216 },
        { 198,208,214 },
        { 195,207,213 },
        { 192,205,211 },
        { 189,203,210 },
        { 186,202,209 },
        { 182,200,207 },
        { 179,199,206 },
        { 176,197,205 },
        { 173,195,204 },
        { 170,194,204 },
        { 167,192,203 },
        { 164,190,202 },
        { 161,189,201 },
        { 158,187,201 },
        { 155,185,200 },
        { 153,183,199 },
        { 150,182,199 },
        { 147,180,198 },
        { 145,178,198 },
        { 142,176,197 },
        { 140,175,197 },
        { 137,173,197 },
        { 135,171,196 },
        { 133,169,196 },
        { 130,167,195 },
        { 128,165,195 },
        { 126,164,195 },
        { 124,162,194 },
        { 122,160,194 },
        { 120,158,194 },
        { 118,156,193 },
        { 117,154,193 },
        { 115,152,193 },
        { 113,150,193 },
        { 112,148,192 },
        { 110,146,192 },
        { 109,144,192 },
        { 108,142,191 },
        { 107,140,191 },
        { 105,138,191 },
        { 104,136,190 },
        { 103,134,190 },
        { 102,132,190 },
        { 102,130,189 },
        { 101,127,189 },
        { 100,125,188 },
        { 99,123,188 },
        { 99,121,187 },
        { 98,119,187 },
        { 98,117,186 },
        { 97,114,186 },
        { 97,112,185 },
        { 97,110,184 },
        { 96,108,184 },
        { 96,105,183 },
        { 96,103,182 },
        { 96,101,181 },
        { 95,99,181 },
        { 95,96,180 },
        { 95,94,179 },
        { 95,92,178 },
        { 95,89,177 },
        { 95,87,176 },
        { 95,84,175 },
        { 95,82,173 },
        { 94,80,172 },
        { 94,77,171 },
        { 94,75,170 },
        { 94,72,168 },
        { 94,70,167 },
        { 94,68,165 },
        { 94,65,163 },
        { 93,63,162 },
        { 93,60,160 },
        { 93,58,158 },
        { 92,55,156 },
        { 92,53,154 },
        { 92,51,152 },
        { 91,48,149 },
        { 91,46,147 },
        { 90,44,145 },
        { 89,41,142 },
        { 88,39,139 },
        { 88,37,136 },
        { 87,35,134 },
        { 86,33,131 },
        { 85,31,127 },
        { 83,30,124 },
        { 82,28,121 },
        { 81,27,117 },
        { 79,25,114 },
        { 78,24,111 },
        { 76,23,107 },
        { 75,22,104 },
        { 73,21,100 },
        { 71,20,96 },
        { 69,19,93 },
        { 67,18,90 },
        { 65,17,86 },
        { 63,17,83 },
        { 61,16,79 },
        { 59,15,76 },
        { 57,14,73 },
        { 55,13,69 },
        { 53,13,66 },
        { 51,12,63 },
        { 48,11,60 },
        { 46,10,57 },
        { 44,9,54 },
        { 42,8,51 },
        { 39,8,48 },
        { 37,7,45 },
        { 35,6,42 },
        { 35,6,42 },
        { 38,7,43 },
        { 40,8,45 },
        { 43,9,47 },
        { 45,10,49 },
        { 48,11,50 },
        { 50,12,52 },
        { 53,13,53 },
        { 55,13,55 },
        { 58,14,57 },
        { 61,15,58 },
        { 63,16,60 },
        { 66,16,61 },
        { 68,17,62 },
        { 71,18,64 },
        { 74,19,65 },
        { 76,19,66 },
        { 79,20,68 },
        { 82,20,69 },
        { 84,21,70 },
        { 87,22,71 },
        { 90,22,72 },
        { 92,23,73 },
        { 95,24,74 },
        { 98,24,75 },
        { 100,25,76 },
        { 103,26,76 },
        { 105,26,77 },
        { 108,27,78 },
        { 111,28,78 },
        { 113,29,79 },
        { 116,30,79 },
        { 118,31,79 },
        { 121,32,80 },
        { 123,33,80 },
        { 126,34,80 },
        { 128,35,80 },
        { 131,36,80 },
        { 133,38,80 },
        { 135,39,80 },
        { 137,41,80 },
        { 140,42,80 },
        { 142,44,80 },
        { 144,46,80 },
        { 146,47,80 },
        { 148,49,80 },
        { 150,51,80 },
        { 152,53,80 },
        { 154,55,79 },
        { 156,56,79 },
        { 158,58,79 },
        { 159,60,79 },
        { 161,62,79 },
        { 163,64,79 },
        { 164,66,79 },
        { 166,69,80 },
        { 168,71,80 },
        { 169,73,80 },
        { 171,75,80 },
        { 172,77,80 },
        { 174,79,81 },
        { 175,82,81 },
        { 176,84,81 },
        { 178,86,82 },
        { 179,88,82 },
        { 180,91,83 },
        { 182,93,84 },
        { 183,95,84 },
        { 184,98,85 },
        { 185,100,86 },
        { 186,102,87 },
        { 187,105,88 },
        { 188,107,89 },
        { 189,109,90 },
        { 190,112,91 },
        { 191,114,92 },
        { 192,117,94 },
        { 193,119,95 },
        { 193,122,97 },
        { 194,124,98 },
        { 195,126,100 },
        { 196,129,102 },
        { 196,131,104 },
        { 197,134,106 },
        { 198,136,108 },
        { 198,139,110 },
        { 199,141,112 },
        { 199,144,115 },
        { 200,146,117 },
        { 201,149,120 },
        { 201,151,122 },
        { 202,154,125 },
        { 202,156,128 },
        { 203,158,131 },
        { 203,161,134 },
        { 204,163,137 },
        { 204,166,140 },
        { 205,168,143 },
        { 206,170,146 },
        { 206,173,150 },
        { 207,175,153 },
        { 208,177,156 },
        { 209,180,160 },
        { 209,182,163 },
        { 210,184,167 },
        { 211,187,170 },
        { 212,189,174 },
        { 213,191,177 },
        { 214,193,181 },
        { 215,195,184 },
        { 216,198,188 },
        { 218,200,191 },
        { 219,202,195 },
        { 220,204,199 },
        { 221,206,202 },
        { 223,209,206 },
        { 224,211,209 },
        { 225,213,213 },
        { 227,215,216 },
        { 228,217,219 },
        { 230,220,222 },
        { 232,222,225 },
        { 234,224,228 },
        { 235,226,232 },
        { 237,228,235 },
        { 240,230,238 },
        { 242,232,241 },
        { 244,235,244 },
      };
      return &colorMap;
      break;
    }
  }
}

// ****************************************************************************																			   
/// Unit tests.
// ****************************************************************************

void ColorScale::test()
{
  double r, g, b;

  r = 0.2;
  g = 0.5;
  b = 0.7;

  double h, s, v;
  rgbToHsv(r, g, b, h, s, v);

  double r2, g2, b2;
  hsvToRgb(h, s, v, r2, g2, b2);

  wxPrintf("=== Color model conversion test ===\n");
  wxPrintf("before: r=%f g=%f b=%f\n", r, g, b);
  wxPrintf("after : r=%f g=%f b=%f\n", r2, g2, b2);
}

// ****************************************************************************
/// Returns the maximum of a, b, and c.
// ****************************************************************************

double ColorScale::maximum(double a, double b, double c)
{
  double v = a;
  if (b > v) { v = b; }
  if (c > v) { v = c; }
  return v;
}

// ****************************************************************************
/// Returns the minimum of a, b, and c.
// ****************************************************************************

double ColorScale::minimum(double a, double b, double c)
{
  double v = a;
  if (b < v) { v = b; }
  if (c < v) { v = c; }
  return v;
}

// ****************************************************************************
